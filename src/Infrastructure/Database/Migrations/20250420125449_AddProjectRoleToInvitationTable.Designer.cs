// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250420125449_AddProjectRoleToInvitationTable")]
    partial class AddProjectRoleToInvitationTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Domain.Projects.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("color");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_on_utc");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_on_utc");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_archive");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_boards");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_boards_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_boards_deleted_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_boards_modified_by_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_boards_project_id");

                    b.ToTable("boards", "public");
                });

            modelBuilder.Entity("Domain.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_on_utc");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_on_utc");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("TEXT")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_projects_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_projects_deleted_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_projects_modified_by_id");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_projects_workspace_id");

                    b.ToTable("projects", "public");
                });

            modelBuilder.Entity("Domain.Subscriptions.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("InvitedId")
                        .HasColumnType("TEXT")
                        .HasColumnName("invited_id");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_approved");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_on_utc");

                    b.Property<int>("ProjectRole")
                        .HasColumnType("INTEGER")
                        .HasColumnName("project_role");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("token");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("TEXT")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_invitations");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_invitations_created_by_id");

                    b.HasIndex("InvitedId")
                        .HasDatabaseName("ix_invitations_invited_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_invitations_modified_by_id");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_invitations_token");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_invitations_workspace_id");

                    b.ToTable("invitations", "public");
                });

            modelBuilder.Entity("Domain.Tasks.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Attachment")
                        .HasColumnType("TEXT")
                        .HasColumnName("attachment");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("TEXT")
                        .HasColumnName("board_id");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_on_utc");

                    b.Property<DateOnly>("DeadLine")
                        .HasColumnType("TEXT")
                        .HasColumnName("dead_line");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_on_utc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER")
                        .HasColumnName("priority");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("TEXT")
                        .HasColumnName("thumbnail");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.HasIndex("BoardId")
                        .HasDatabaseName("ix_tasks_board_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_tasks_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_tasks_deleted_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_tasks_modified_by_id");

                    b.ToTable("tasks", "public");
                });

            modelBuilder.Entity("Domain.Users.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_settings");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_settings_created_by_id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ix_settings_key");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_settings_modified_by_id");

                    b.ToTable("settings", "public");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsChangePassword")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_change_password");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("phone_number");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("NormalizedUserName")
                        .HasDatabaseName("ix_users_normalized_user_name");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("Domain.Workspaces.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("color");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_on_utc");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_on_utc");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_workspaces");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_workspaces_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_workspaces_deleted_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_workspaces_modified_by_id");

                    b.ToTable("workspaces", "public");
                });

            modelBuilder.Entity("Domain.Projects.Board", b =>
                {
                    b.HasOne("Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_boards_users_created_by_id");

                    b.HasOne("Domain.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_boards_users_deleted_by_id");

                    b.HasOne("Domain.Users.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_boards_users_modified_by_id");

                    b.HasOne("Domain.Projects.Project", "Project")
                        .WithMany("Boards")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_boards_projects_project_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Projects.Project", b =>
                {
                    b.HasOne("Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_projects_users_created_by_id");

                    b.HasOne("Domain.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_projects_users_deleted_by_id");

                    b.HasOne("Domain.Users.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_projects_users_modified_by_id");

                    b.HasOne("Domain.Workspaces.Workspace", "Workspace")
                        .WithMany("Projects")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_workspaces_workspace_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Subscriptions.Invitation", b =>
                {
                    b.HasOne("Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_invitations_users_created_by_id");

                    b.HasOne("Domain.Users.User", "Invited")
                        .WithMany()
                        .HasForeignKey("InvitedId")
                        .HasConstraintName("fk_invitations_users_invited_id");

                    b.HasOne("Domain.Users.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_invitations_users_modified_by_id");

                    b.HasOne("Domain.Workspaces.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invitations_workspaces_workspace_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("Invited");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Tasks.Task", b =>
                {
                    b.HasOne("Domain.Projects.Board", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_boards_board_id");

                    b.HasOne("Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_tasks_users_created_by_id");

                    b.HasOne("Domain.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_tasks_users_deleted_by_id");

                    b.HasOne("Domain.Users.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_tasks_users_modified_by_id");

                    b.Navigation("Board");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Domain.Users.Setting", b =>
                {
                    b.HasOne("Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_settings_users_created_by_id");

                    b.HasOne("Domain.Users.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_settings_users_modified_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Domain.Workspaces.Workspace", b =>
                {
                    b.HasOne("Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_workspaces_users_created_by_id");

                    b.HasOne("Domain.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_workspaces_users_deleted_by_id");

                    b.HasOne("Domain.Users.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_workspaces_users_modified_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Domain.Projects.Project", b =>
                {
                    b.Navigation("Boards");
                });

            modelBuilder.Entity("Domain.Workspaces.Workspace", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
